"""Provides data for the Cifar100 dataset."""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os

import tensorflow as tf

from tensorflow.contrib.slim.python.slim.data import dataset
from tensorflow.contrib.slim.python.slim.data import tfexample_decoder

_FILE_PATTERN = 'cifar100_%s-*'

_DATASET_DIR = ('')

_SPLITS_TO_SIZES = {'train': 50000, 'test': 10000}

_NUM_CLASSES = 100

_ITEMS_TO_DESCRIPTIONS = {
    'image': 'A [32 x 32 x 3] color image.',
    'image/class/label': 'A single integer between 0 and 99.',
    'image/format': 'a string indicating the image format.',
    'image/class/fine_label': 'A single integer between 0 and 99.',
}


def get_split(split_name, dataset_dir=None):
  """Gets a dataset tuple with instructions for reading cifar100.

  Args:
    split_name: A train/test split name.
    dataset_dir: The base directory of the dataset sources.

  Returns:
    A `Dataset` namedtuple. Image tensors are integers in [0, 255].

  Raises:
    ValueError: if `split_name` is not a valid train/test split.
  """
  if split_name not in _SPLITS_TO_SIZES:
    raise ValueError('split name %s was not recognized.' % split_name)

  file_pattern = os.path.join(dataset_dir, _FILE_PATTERN % split_name)

  keys_to_features = {
      'image/encoded': tf.FixedLenFeature((), tf.string, default_value=''),
      'image/format': tf.FixedLenFeature((), tf.string, default_value=''),
      'image/class/label': tf.FixedLenFeature(
          [1], tf.int64, default_value=tf.zeros([1], dtype=tf.int64)),
      'image/class/fine_label': tf.FixedLenFeature(
          [1], tf.int64, default_value=tf.zeros([1], dtype=tf.int64)),
  }

  if split_name == 'train':
    items_to_handlers = {
        'image': tfexample_decoder.Image(shape=[32, 32, 3]),
        'label': tfexample_decoder.Tensor('image/class/label'),
    }
  else:
    items_to_handlers = {
        'image': tfexample_decoder.Image(shape=[32, 32, 3]),
        'label': tfexample_decoder.Tensor('image/class/fine_label'),
    }

  decoder = tfexample_decoder.TFExampleDecoder(
      keys_to_features, items_to_handlers)

  return dataset.Dataset(
      data_sources=file_pattern,
      reader=tf.TFRecordReader,
      decoder=decoder,
      num_samples=_SPLITS_TO_SIZES[split_name],
      num_classes=_NUM_CLASSES,
      items_to_descriptions=_ITEMS_TO_DESCRIPTIONS)


test_dataset = get_split('test', dataset_dir='path_to_dataset_directory')
iterator = test_dataset.make_one_shot_iterator()
next_element = iterator.get_next()


correct_prediction = tf.equal(tf.argmax(predictions, 1), next_element['label'])
accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32 ))
with tf.Session() as sess:

    sess.run(tf.global_variables_initializer())

    num_correct = 0
    num_samples = _SPLITS_TO_SIZES['test']

    try:
        while True:
            acc = sess.run(accuracy)
            num_correct += acc
    except tf.errors.OutOfRangeError:
        pass

    test_accuracy = num_correct / num_samples
    print("Test Accuracy:", test_accuracy)

